//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ObjectEditor {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Items : DataSet {
        
        private itemsDataTable tableitems;
        
        public Items() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Items(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["items"] != null)) {
                    this.Tables.Add(new itemsDataTable(ds.Tables["items"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public itemsDataTable items {
            get {
                return this.tableitems;
            }
        }
        
        public override DataSet Clone() {
            Items cln = ((Items)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["items"] != null)) {
                this.Tables.Add(new itemsDataTable(ds.Tables["items"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableitems = ((itemsDataTable)(this.Tables["items"]));
            if ((this.tableitems != null)) {
                this.tableitems.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Items";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/Items.xsd";
            this.Locale = new System.Globalization.CultureInfo("uk-UA");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableitems = new itemsDataTable();
            this.Tables.Add(this.tableitems);
        }
        
        private bool ShouldSerializeitems() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void itemsRowChangeEventHandler(object sender, itemsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnObjectType;
            
            private DataColumn columnObjectID;
            
            private DataColumn columnObjectFullID;
            
            private DataColumn columnFrameIDType;
            
            private DataColumn columnFrameIDOffset;
            
            private DataColumn columnFrameID;
            
            private DataColumn columnItemMapValue;
            
            private DataColumn columnWeaponComplexity;
            
            private DataColumn columnAttackMode1;
            
            private DataColumn columnAttackMode2;
            
            private DataColumn columnObjectSubtype;
            
            private DataColumn columnMaterialType;
            
            private DataColumn columnMinStr;
            
            private DataColumn columnWeight;
            
            private DataColumn columnBasePrice;
            
            private DataColumn columnFrameInventID;
            
            private DataColumn columnExpr1;
            
            private DataColumn columnExpr2;
            
            private DataColumn columnExpr3;
            
            private DataColumn columnObjectName;
            
            private DataColumn columnObjectDesc;
            
            internal itemsDataTable() : 
                    base("items") {
                this.InitClass();
            }
            
            internal itemsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ObjectTypeColumn {
                get {
                    return this.columnObjectType;
                }
            }
            
            internal DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            internal DataColumn ObjectFullIDColumn {
                get {
                    return this.columnObjectFullID;
                }
            }
            
            internal DataColumn FrameIDTypeColumn {
                get {
                    return this.columnFrameIDType;
                }
            }
            
            internal DataColumn FrameIDOffsetColumn {
                get {
                    return this.columnFrameIDOffset;
                }
            }
            
            internal DataColumn FrameIDColumn {
                get {
                    return this.columnFrameID;
                }
            }
            
            internal DataColumn ItemMapValueColumn {
                get {
                    return this.columnItemMapValue;
                }
            }
            
            internal DataColumn WeaponComplexityColumn {
                get {
                    return this.columnWeaponComplexity;
                }
            }
            
            internal DataColumn AttackMode1Column {
                get {
                    return this.columnAttackMode1;
                }
            }
            
            internal DataColumn AttackMode2Column {
                get {
                    return this.columnAttackMode2;
                }
            }
            
            internal DataColumn ObjectSubtypeColumn {
                get {
                    return this.columnObjectSubtype;
                }
            }
            
            internal DataColumn MaterialTypeColumn {
                get {
                    return this.columnMaterialType;
                }
            }
            
            internal DataColumn MinStrColumn {
                get {
                    return this.columnMinStr;
                }
            }
            
            internal DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            internal DataColumn BasePriceColumn {
                get {
                    return this.columnBasePrice;
                }
            }
            
            internal DataColumn FrameInventIDColumn {
                get {
                    return this.columnFrameInventID;
                }
            }
            
            internal DataColumn Expr1Column {
                get {
                    return this.columnExpr1;
                }
            }
            
            internal DataColumn Expr2Column {
                get {
                    return this.columnExpr2;
                }
            }
            
            internal DataColumn Expr3Column {
                get {
                    return this.columnExpr3;
                }
            }
            
            internal DataColumn ObjectNameColumn {
                get {
                    return this.columnObjectName;
                }
            }
            
            internal DataColumn ObjectDescColumn {
                get {
                    return this.columnObjectDesc;
                }
            }
            
            public itemsRow this[int index] {
                get {
                    return ((itemsRow)(this.Rows[index]));
                }
            }
            
            public event itemsRowChangeEventHandler itemsRowChanged;
            
            public event itemsRowChangeEventHandler itemsRowChanging;
            
            public event itemsRowChangeEventHandler itemsRowDeleted;
            
            public event itemsRowChangeEventHandler itemsRowDeleting;
            
            public void AdditemsRow(itemsRow row) {
                this.Rows.Add(row);
            }
            
            public itemsRow AdditemsRow(
                        short ObjectType, 
                        short ObjectID, 
                        System.Decimal ObjectFullID, 
                        short FrameIDType, 
                        short FrameIDOffset, 
                        short FrameID, 
                        short ItemMapValue, 
                        short WeaponComplexity, 
                        System.Byte AttackMode1, 
                        System.Byte AttackMode2, 
                        short ObjectSubtype, 
                        System.Byte MaterialType, 
                        System.Byte MinStr, 
                        int Weight, 
                        int BasePrice, 
                        int FrameInventID, 
                        short Expr1, 
                        short Expr2, 
                        System.Decimal Expr3, 
                        string ObjectName, 
                        string ObjectDesc) {
                itemsRow rowitemsRow = ((itemsRow)(this.NewRow()));
                rowitemsRow.ItemArray = new object[] {
                        ObjectType,
                        ObjectID,
                        ObjectFullID,
                        FrameIDType,
                        FrameIDOffset,
                        FrameID,
                        ItemMapValue,
                        WeaponComplexity,
                        AttackMode1,
                        AttackMode2,
                        ObjectSubtype,
                        MaterialType,
                        MinStr,
                        Weight,
                        BasePrice,
                        FrameInventID,
                        Expr1,
                        Expr2,
                        Expr3,
                        ObjectName,
                        ObjectDesc};
                this.Rows.Add(rowitemsRow);
                return rowitemsRow;
            }
            
            public itemsRow FindByExpr1Expr2(short Expr1, short Expr2) {
                return ((itemsRow)(this.Rows.Find(new object[] {
                            Expr1,
                            Expr2})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                itemsDataTable cln = ((itemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new itemsDataTable();
            }
            
            internal void InitVars() {
                this.columnObjectType = this.Columns["ObjectType"];
                this.columnObjectID = this.Columns["ObjectID"];
                this.columnObjectFullID = this.Columns["ObjectFullID"];
                this.columnFrameIDType = this.Columns["FrameIDType"];
                this.columnFrameIDOffset = this.Columns["FrameIDOffset"];
                this.columnFrameID = this.Columns["FrameID"];
                this.columnItemMapValue = this.Columns["ItemMapValue"];
                this.columnWeaponComplexity = this.Columns["WeaponComplexity"];
                this.columnAttackMode1 = this.Columns["AttackMode1"];
                this.columnAttackMode2 = this.Columns["AttackMode2"];
                this.columnObjectSubtype = this.Columns["ObjectSubtype"];
                this.columnMaterialType = this.Columns["MaterialType"];
                this.columnMinStr = this.Columns["MinStr"];
                this.columnWeight = this.Columns["Weight"];
                this.columnBasePrice = this.Columns["BasePrice"];
                this.columnFrameInventID = this.Columns["FrameInventID"];
                this.columnExpr1 = this.Columns["Expr1"];
                this.columnExpr2 = this.Columns["Expr2"];
                this.columnExpr3 = this.Columns["Expr3"];
                this.columnObjectName = this.Columns["ObjectName"];
                this.columnObjectDesc = this.Columns["ObjectDesc"];
            }
            
            private void InitClass() {
                this.columnObjectType = new DataColumn("ObjectType", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectType);
                this.columnObjectID = new DataColumn("ObjectID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectID);
                this.columnObjectFullID = new DataColumn("ObjectFullID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectFullID);
                this.columnFrameIDType = new DataColumn("FrameIDType", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrameIDType);
                this.columnFrameIDOffset = new DataColumn("FrameIDOffset", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrameIDOffset);
                this.columnFrameID = new DataColumn("FrameID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrameID);
                this.columnItemMapValue = new DataColumn("ItemMapValue", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemMapValue);
                this.columnWeaponComplexity = new DataColumn("WeaponComplexity", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeaponComplexity);
                this.columnAttackMode1 = new DataColumn("AttackMode1", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAttackMode1);
                this.columnAttackMode2 = new DataColumn("AttackMode2", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAttackMode2);
                this.columnObjectSubtype = new DataColumn("ObjectSubtype", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectSubtype);
                this.columnMaterialType = new DataColumn("MaterialType", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaterialType);
                this.columnMinStr = new DataColumn("MinStr", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMinStr);
                this.columnWeight = new DataColumn("Weight", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeight);
                this.columnBasePrice = new DataColumn("BasePrice", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBasePrice);
                this.columnFrameInventID = new DataColumn("FrameInventID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrameInventID);
                this.columnExpr1 = new DataColumn("Expr1", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr1);
                this.columnExpr2 = new DataColumn("Expr2", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr2);
                this.columnExpr3 = new DataColumn("Expr3", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr3);
                this.columnObjectName = new DataColumn("ObjectName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectName);
                this.columnObjectDesc = new DataColumn("ObjectDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectDesc);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnExpr1,
                                this.columnExpr2}, true));
                this.columnObjectType.AllowDBNull = false;
                this.columnObjectID.AllowDBNull = false;
                this.columnExpr1.AllowDBNull = false;
                this.columnExpr2.AllowDBNull = false;
            }
            
            public itemsRow NewitemsRow() {
                return ((itemsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new itemsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(itemsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.itemsRowChanged != null)) {
                    this.itemsRowChanged(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.itemsRowChanging != null)) {
                    this.itemsRowChanging(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.itemsRowDeleted != null)) {
                    this.itemsRowDeleted(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.itemsRowDeleting != null)) {
                    this.itemsRowDeleting(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveitemsRow(itemsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsRow : DataRow {
            
            private itemsDataTable tableitems;
            
            internal itemsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableitems = ((itemsDataTable)(this.Table));
            }
            
            public short ObjectType {
                get {
                    return ((short)(this[this.tableitems.ObjectTypeColumn]));
                }
                set {
                    this[this.tableitems.ObjectTypeColumn] = value;
                }
            }
            
            public short ObjectID {
                get {
                    return ((short)(this[this.tableitems.ObjectIDColumn]));
                }
                set {
                    this[this.tableitems.ObjectIDColumn] = value;
                }
            }
            
            public System.Decimal ObjectFullID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableitems.ObjectFullIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ObjectFullIDColumn] = value;
                }
            }
            
            public short FrameIDType {
                get {
                    try {
                        return ((short)(this[this.tableitems.FrameIDTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.FrameIDTypeColumn] = value;
                }
            }
            
            public short FrameIDOffset {
                get {
                    try {
                        return ((short)(this[this.tableitems.FrameIDOffsetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.FrameIDOffsetColumn] = value;
                }
            }
            
            public short FrameID {
                get {
                    try {
                        return ((short)(this[this.tableitems.FrameIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.FrameIDColumn] = value;
                }
            }
            
            public short ItemMapValue {
                get {
                    try {
                        return ((short)(this[this.tableitems.ItemMapValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ItemMapValueColumn] = value;
                }
            }
            
            public short WeaponComplexity {
                get {
                    try {
                        return ((short)(this[this.tableitems.WeaponComplexityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.WeaponComplexityColumn] = value;
                }
            }
            
            public System.Byte AttackMode1 {
                get {
                    try {
                        return ((System.Byte)(this[this.tableitems.AttackMode1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.AttackMode1Column] = value;
                }
            }
            
            public System.Byte AttackMode2 {
                get {
                    try {
                        return ((System.Byte)(this[this.tableitems.AttackMode2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.AttackMode2Column] = value;
                }
            }
            
            public short ObjectSubtype {
                get {
                    try {
                        return ((short)(this[this.tableitems.ObjectSubtypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ObjectSubtypeColumn] = value;
                }
            }
            
            public System.Byte MaterialType {
                get {
                    try {
                        return ((System.Byte)(this[this.tableitems.MaterialTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.MaterialTypeColumn] = value;
                }
            }
            
            public System.Byte MinStr {
                get {
                    try {
                        return ((System.Byte)(this[this.tableitems.MinStrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.MinStrColumn] = value;
                }
            }
            
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableitems.WeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.WeightColumn] = value;
                }
            }
            
            public int BasePrice {
                get {
                    try {
                        return ((int)(this[this.tableitems.BasePriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.BasePriceColumn] = value;
                }
            }
            
            public int FrameInventID {
                get {
                    try {
                        return ((int)(this[this.tableitems.FrameInventIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.FrameInventIDColumn] = value;
                }
            }
            
            public short Expr1 {
                get {
                    return ((short)(this[this.tableitems.Expr1Column]));
                }
                set {
                    this[this.tableitems.Expr1Column] = value;
                }
            }
            
            public short Expr2 {
                get {
                    return ((short)(this[this.tableitems.Expr2Column]));
                }
                set {
                    this[this.tableitems.Expr2Column] = value;
                }
            }
            
            public System.Decimal Expr3 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableitems.Expr3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.Expr3Column] = value;
                }
            }
            
            public string ObjectName {
                get {
                    try {
                        return ((string)(this[this.tableitems.ObjectNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ObjectNameColumn] = value;
                }
            }
            
            public string ObjectDesc {
                get {
                    try {
                        return ((string)(this[this.tableitems.ObjectDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ObjectDescColumn] = value;
                }
            }
            
            public bool IsObjectFullIDNull() {
                return this.IsNull(this.tableitems.ObjectFullIDColumn);
            }
            
            public void SetObjectFullIDNull() {
                this[this.tableitems.ObjectFullIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFrameIDTypeNull() {
                return this.IsNull(this.tableitems.FrameIDTypeColumn);
            }
            
            public void SetFrameIDTypeNull() {
                this[this.tableitems.FrameIDTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsFrameIDOffsetNull() {
                return this.IsNull(this.tableitems.FrameIDOffsetColumn);
            }
            
            public void SetFrameIDOffsetNull() {
                this[this.tableitems.FrameIDOffsetColumn] = System.Convert.DBNull;
            }
            
            public bool IsFrameIDNull() {
                return this.IsNull(this.tableitems.FrameIDColumn);
            }
            
            public void SetFrameIDNull() {
                this[this.tableitems.FrameIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemMapValueNull() {
                return this.IsNull(this.tableitems.ItemMapValueColumn);
            }
            
            public void SetItemMapValueNull() {
                this[this.tableitems.ItemMapValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeaponComplexityNull() {
                return this.IsNull(this.tableitems.WeaponComplexityColumn);
            }
            
            public void SetWeaponComplexityNull() {
                this[this.tableitems.WeaponComplexityColumn] = System.Convert.DBNull;
            }
            
            public bool IsAttackMode1Null() {
                return this.IsNull(this.tableitems.AttackMode1Column);
            }
            
            public void SetAttackMode1Null() {
                this[this.tableitems.AttackMode1Column] = System.Convert.DBNull;
            }
            
            public bool IsAttackMode2Null() {
                return this.IsNull(this.tableitems.AttackMode2Column);
            }
            
            public void SetAttackMode2Null() {
                this[this.tableitems.AttackMode2Column] = System.Convert.DBNull;
            }
            
            public bool IsObjectSubtypeNull() {
                return this.IsNull(this.tableitems.ObjectSubtypeColumn);
            }
            
            public void SetObjectSubtypeNull() {
                this[this.tableitems.ObjectSubtypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaterialTypeNull() {
                return this.IsNull(this.tableitems.MaterialTypeColumn);
            }
            
            public void SetMaterialTypeNull() {
                this[this.tableitems.MaterialTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMinStrNull() {
                return this.IsNull(this.tableitems.MinStrColumn);
            }
            
            public void SetMinStrNull() {
                this[this.tableitems.MinStrColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeightNull() {
                return this.IsNull(this.tableitems.WeightColumn);
            }
            
            public void SetWeightNull() {
                this[this.tableitems.WeightColumn] = System.Convert.DBNull;
            }
            
            public bool IsBasePriceNull() {
                return this.IsNull(this.tableitems.BasePriceColumn);
            }
            
            public void SetBasePriceNull() {
                this[this.tableitems.BasePriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsFrameInventIDNull() {
                return this.IsNull(this.tableitems.FrameInventIDColumn);
            }
            
            public void SetFrameInventIDNull() {
                this[this.tableitems.FrameInventIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsExpr3Null() {
                return this.IsNull(this.tableitems.Expr3Column);
            }
            
            public void SetExpr3Null() {
                this[this.tableitems.Expr3Column] = System.Convert.DBNull;
            }
            
            public bool IsObjectNameNull() {
                return this.IsNull(this.tableitems.ObjectNameColumn);
            }
            
            public void SetObjectNameNull() {
                this[this.tableitems.ObjectNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsObjectDescNull() {
                return this.IsNull(this.tableitems.ObjectDescColumn);
            }
            
            public void SetObjectDescNull() {
                this[this.tableitems.ObjectDescColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsRowChangeEvent : EventArgs {
            
            private itemsRow eventRow;
            
            private DataRowAction eventAction;
            
            public itemsRowChangeEvent(itemsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public itemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
