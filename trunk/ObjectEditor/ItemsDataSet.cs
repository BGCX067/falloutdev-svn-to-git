//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ObjectEditor {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ItemsDataSet : DataSet {
        
        private itemsDataTable tableitems;
        
        public ItemsDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ItemsDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["items"] != null)) {
                    this.Tables.Add(new itemsDataTable(ds.Tables["items"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public itemsDataTable items {
            get {
                return this.tableitems;
            }
        }
        
        public override DataSet Clone() {
            ItemsDataSet cln = ((ItemsDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["items"] != null)) {
                this.Tables.Add(new itemsDataTable(ds.Tables["items"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableitems = ((itemsDataTable)(this.Tables["items"]));
            if ((this.tableitems != null)) {
                this.tableitems.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ItemsDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/ItemsDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("uk-UA");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableitems = new itemsDataTable();
            this.Tables.Add(this.tableitems);
        }
        
        private bool ShouldSerializeitems() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void itemsRowChangeEventHandler(object sender, itemsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnObjectType;
            
            private DataColumn columnObjectID;
            
            private DataColumn columnObjectFullID;
            
            private DataColumn columnObjectName;
            
            private DataColumn columnObjectDesc;
            
            private DataColumn columnExpr1;
            
            private DataColumn columnExpr2;
            
            private DataColumn columnExpr3;
            
            private DataColumn columnExpr4;
            
            private DataColumn columnExpr5;
            
            internal itemsDataTable() : 
                    base("items") {
                this.InitClass();
            }
            
            internal itemsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ObjectTypeColumn {
                get {
                    return this.columnObjectType;
                }
            }
            
            internal DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            internal DataColumn ObjectFullIDColumn {
                get {
                    return this.columnObjectFullID;
                }
            }
            
            internal DataColumn ObjectNameColumn {
                get {
                    return this.columnObjectName;
                }
            }
            
            internal DataColumn ObjectDescColumn {
                get {
                    return this.columnObjectDesc;
                }
            }
            
            internal DataColumn Expr1Column {
                get {
                    return this.columnExpr1;
                }
            }
            
            internal DataColumn Expr2Column {
                get {
                    return this.columnExpr2;
                }
            }
            
            internal DataColumn Expr3Column {
                get {
                    return this.columnExpr3;
                }
            }
            
            internal DataColumn Expr4Column {
                get {
                    return this.columnExpr4;
                }
            }
            
            internal DataColumn Expr5Column {
                get {
                    return this.columnExpr5;
                }
            }
            
            public itemsRow this[int index] {
                get {
                    return ((itemsRow)(this.Rows[index]));
                }
            }
            
            public event itemsRowChangeEventHandler itemsRowChanged;
            
            public event itemsRowChangeEventHandler itemsRowChanging;
            
            public event itemsRowChangeEventHandler itemsRowDeleted;
            
            public event itemsRowChangeEventHandler itemsRowDeleting;
            
            public void AdditemsRow(itemsRow row) {
                this.Rows.Add(row);
            }
            
            public itemsRow AdditemsRow(short ObjectType, short ObjectID, System.Decimal ObjectFullID, string ObjectName, string ObjectDesc, short Expr1, short Expr2, System.Decimal Expr3, string Expr4, string Expr5) {
                itemsRow rowitemsRow = ((itemsRow)(this.NewRow()));
                rowitemsRow.ItemArray = new object[] {
                        ObjectType,
                        ObjectID,
                        ObjectFullID,
                        ObjectName,
                        ObjectDesc,
                        Expr1,
                        Expr2,
                        Expr3,
                        Expr4,
                        Expr5};
                this.Rows.Add(rowitemsRow);
                return rowitemsRow;
            }
            
            public itemsRow FindByObjectTypeObjectID(short ObjectType, short ObjectID) {
                return ((itemsRow)(this.Rows.Find(new object[] {
                            ObjectType,
                            ObjectID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                itemsDataTable cln = ((itemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new itemsDataTable();
            }
            
            internal void InitVars() {
                this.columnObjectType = this.Columns["ObjectType"];
                this.columnObjectID = this.Columns["ObjectID"];
                this.columnObjectFullID = this.Columns["ObjectFullID"];
                this.columnObjectName = this.Columns["ObjectName"];
                this.columnObjectDesc = this.Columns["ObjectDesc"];
                this.columnExpr1 = this.Columns["Expr1"];
                this.columnExpr2 = this.Columns["Expr2"];
                this.columnExpr3 = this.Columns["Expr3"];
                this.columnExpr4 = this.Columns["Expr4"];
                this.columnExpr5 = this.Columns["Expr5"];
            }
            
            private void InitClass() {
                this.columnObjectType = new DataColumn("ObjectType", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectType);
                this.columnObjectID = new DataColumn("ObjectID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectID);
                this.columnObjectFullID = new DataColumn("ObjectFullID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectFullID);
                this.columnObjectName = new DataColumn("ObjectName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectName);
                this.columnObjectDesc = new DataColumn("ObjectDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectDesc);
                this.columnExpr1 = new DataColumn("Expr1", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr1);
                this.columnExpr2 = new DataColumn("Expr2", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr2);
                this.columnExpr3 = new DataColumn("Expr3", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr3);
                this.columnExpr4 = new DataColumn("Expr4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr4);
                this.columnExpr5 = new DataColumn("Expr5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr5);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnObjectType,
                                this.columnObjectID}, true));
                this.columnObjectType.AllowDBNull = false;
                this.columnObjectID.AllowDBNull = false;
                this.columnExpr1.AllowDBNull = false;
                this.columnExpr2.AllowDBNull = false;
            }
            
            public itemsRow NewitemsRow() {
                return ((itemsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new itemsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(itemsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.itemsRowChanged != null)) {
                    this.itemsRowChanged(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.itemsRowChanging != null)) {
                    this.itemsRowChanging(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.itemsRowDeleted != null)) {
                    this.itemsRowDeleted(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.itemsRowDeleting != null)) {
                    this.itemsRowDeleting(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveitemsRow(itemsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsRow : DataRow {
            
            private itemsDataTable tableitems;
            
            internal itemsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableitems = ((itemsDataTable)(this.Table));
            }
            
            public short ObjectType {
                get {
                    return ((short)(this[this.tableitems.ObjectTypeColumn]));
                }
                set {
                    this[this.tableitems.ObjectTypeColumn] = value;
                }
            }
            
            public short ObjectID {
                get {
                    return ((short)(this[this.tableitems.ObjectIDColumn]));
                }
                set {
                    this[this.tableitems.ObjectIDColumn] = value;
                }
            }
            
            public System.Decimal ObjectFullID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableitems.ObjectFullIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ObjectFullIDColumn] = value;
                }
            }
            
            public string ObjectName {
                get {
                    try {
                        return ((string)(this[this.tableitems.ObjectNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ObjectNameColumn] = value;
                }
            }
            
            public string ObjectDesc {
                get {
                    try {
                        return ((string)(this[this.tableitems.ObjectDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ObjectDescColumn] = value;
                }
            }
            
            public short Expr1 {
                get {
                    return ((short)(this[this.tableitems.Expr1Column]));
                }
                set {
                    this[this.tableitems.Expr1Column] = value;
                }
            }
            
            public short Expr2 {
                get {
                    return ((short)(this[this.tableitems.Expr2Column]));
                }
                set {
                    this[this.tableitems.Expr2Column] = value;
                }
            }
            
            public System.Decimal Expr3 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableitems.Expr3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.Expr3Column] = value;
                }
            }
            
            public string Expr4 {
                get {
                    try {
                        return ((string)(this[this.tableitems.Expr4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.Expr4Column] = value;
                }
            }
            
            public string Expr5 {
                get {
                    try {
                        return ((string)(this[this.tableitems.Expr5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.Expr5Column] = value;
                }
            }
            
            public bool IsObjectFullIDNull() {
                return this.IsNull(this.tableitems.ObjectFullIDColumn);
            }
            
            public void SetObjectFullIDNull() {
                this[this.tableitems.ObjectFullIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsObjectNameNull() {
                return this.IsNull(this.tableitems.ObjectNameColumn);
            }
            
            public void SetObjectNameNull() {
                this[this.tableitems.ObjectNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsObjectDescNull() {
                return this.IsNull(this.tableitems.ObjectDescColumn);
            }
            
            public void SetObjectDescNull() {
                this[this.tableitems.ObjectDescColumn] = System.Convert.DBNull;
            }
            
            public bool IsExpr3Null() {
                return this.IsNull(this.tableitems.Expr3Column);
            }
            
            public void SetExpr3Null() {
                this[this.tableitems.Expr3Column] = System.Convert.DBNull;
            }
            
            public bool IsExpr4Null() {
                return this.IsNull(this.tableitems.Expr4Column);
            }
            
            public void SetExpr4Null() {
                this[this.tableitems.Expr4Column] = System.Convert.DBNull;
            }
            
            public bool IsExpr5Null() {
                return this.IsNull(this.tableitems.Expr5Column);
            }
            
            public void SetExpr5Null() {
                this[this.tableitems.Expr5Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsRowChangeEvent : EventArgs {
            
            private itemsRow eventRow;
            
            private DataRowAction eventAction;
            
            public itemsRowChangeEvent(itemsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public itemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
