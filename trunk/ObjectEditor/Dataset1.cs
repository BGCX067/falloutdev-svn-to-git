//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ObjectEditor {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Dataset1 : DataSet {
        
        private protoDataTable tableproto;
        
        private itemsubtypeDataTable tableitemsubtype;
        
        private itemsDataTable tableitems;
        
        private materialtypeDataTable tablematerialtype;
        
        private attack_modeDataTable tableattack_mode;
        
        public Dataset1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Dataset1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["proto"] != null)) {
                    this.Tables.Add(new protoDataTable(ds.Tables["proto"]));
                }
                if ((ds.Tables["itemsubtype"] != null)) {
                    this.Tables.Add(new itemsubtypeDataTable(ds.Tables["itemsubtype"]));
                }
                if ((ds.Tables["items"] != null)) {
                    this.Tables.Add(new itemsDataTable(ds.Tables["items"]));
                }
                if ((ds.Tables["materialtype"] != null)) {
                    this.Tables.Add(new materialtypeDataTable(ds.Tables["materialtype"]));
                }
                if ((ds.Tables["attack_mode"] != null)) {
                    this.Tables.Add(new attack_modeDataTable(ds.Tables["attack_mode"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public protoDataTable proto {
            get {
                return this.tableproto;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public itemsubtypeDataTable itemsubtype {
            get {
                return this.tableitemsubtype;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public itemsDataTable items {
            get {
                return this.tableitems;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public materialtypeDataTable materialtype {
            get {
                return this.tablematerialtype;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public attack_modeDataTable attack_mode {
            get {
                return this.tableattack_mode;
            }
        }
        
        public override DataSet Clone() {
            Dataset1 cln = ((Dataset1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["proto"] != null)) {
                this.Tables.Add(new protoDataTable(ds.Tables["proto"]));
            }
            if ((ds.Tables["itemsubtype"] != null)) {
                this.Tables.Add(new itemsubtypeDataTable(ds.Tables["itemsubtype"]));
            }
            if ((ds.Tables["items"] != null)) {
                this.Tables.Add(new itemsDataTable(ds.Tables["items"]));
            }
            if ((ds.Tables["materialtype"] != null)) {
                this.Tables.Add(new materialtypeDataTable(ds.Tables["materialtype"]));
            }
            if ((ds.Tables["attack_mode"] != null)) {
                this.Tables.Add(new attack_modeDataTable(ds.Tables["attack_mode"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableproto = ((protoDataTable)(this.Tables["proto"]));
            if ((this.tableproto != null)) {
                this.tableproto.InitVars();
            }
            this.tableitemsubtype = ((itemsubtypeDataTable)(this.Tables["itemsubtype"]));
            if ((this.tableitemsubtype != null)) {
                this.tableitemsubtype.InitVars();
            }
            this.tableitems = ((itemsDataTable)(this.Tables["items"]));
            if ((this.tableitems != null)) {
                this.tableitems.InitVars();
            }
            this.tablematerialtype = ((materialtypeDataTable)(this.Tables["materialtype"]));
            if ((this.tablematerialtype != null)) {
                this.tablematerialtype.InitVars();
            }
            this.tableattack_mode = ((attack_modeDataTable)(this.Tables["attack_mode"]));
            if ((this.tableattack_mode != null)) {
                this.tableattack_mode.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Dataset1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Dataset1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableproto = new protoDataTable();
            this.Tables.Add(this.tableproto);
            this.tableitemsubtype = new itemsubtypeDataTable();
            this.Tables.Add(this.tableitemsubtype);
            this.tableitems = new itemsDataTable();
            this.Tables.Add(this.tableitems);
            this.tablematerialtype = new materialtypeDataTable();
            this.Tables.Add(this.tablematerialtype);
            this.tableattack_mode = new attack_modeDataTable();
            this.Tables.Add(this.tableattack_mode);
        }
        
        private bool ShouldSerializeproto() {
            return false;
        }
        
        private bool ShouldSerializeitemsubtype() {
            return false;
        }
        
        private bool ShouldSerializeitems() {
            return false;
        }
        
        private bool ShouldSerializematerialtype() {
            return false;
        }
        
        private bool ShouldSerializeattack_mode() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void protoRowChangeEventHandler(object sender, protoRowChangeEvent e);
        
        public delegate void itemsubtypeRowChangeEventHandler(object sender, itemsubtypeRowChangeEvent e);
        
        public delegate void itemsRowChangeEventHandler(object sender, itemsRowChangeEvent e);
        
        public delegate void materialtypeRowChangeEventHandler(object sender, materialtypeRowChangeEvent e);
        
        public delegate void attack_modeRowChangeEventHandler(object sender, attack_modeRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class protoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnObjectType;
            
            private DataColumn columnObjectID;
            
            private DataColumn columnObjectFullID;
            
            private DataColumn columnFrameIDType;
            
            private DataColumn columnFrameIDOffset;
            
            private DataColumn columnFrameID;
            
            private DataColumn columnItemMapValue;
            
            private DataColumn columnWeaponComplexity;
            
            private DataColumn columnAttackMode1;
            
            private DataColumn columnAttackMode2;
            
            private DataColumn columnObjectSubtype;
            
            private DataColumn columnMaterialType;
            
            private DataColumn columnMinStr;
            
            private DataColumn columnWeight;
            
            private DataColumn columnBasePrice;
            
            private DataColumn columnFrameInventID;
            
            internal protoDataTable() : 
                    base("proto") {
                this.InitClass();
            }
            
            internal protoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ObjectTypeColumn {
                get {
                    return this.columnObjectType;
                }
            }
            
            internal DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            internal DataColumn ObjectFullIDColumn {
                get {
                    return this.columnObjectFullID;
                }
            }
            
            internal DataColumn FrameIDTypeColumn {
                get {
                    return this.columnFrameIDType;
                }
            }
            
            internal DataColumn FrameIDOffsetColumn {
                get {
                    return this.columnFrameIDOffset;
                }
            }
            
            internal DataColumn FrameIDColumn {
                get {
                    return this.columnFrameID;
                }
            }
            
            internal DataColumn ItemMapValueColumn {
                get {
                    return this.columnItemMapValue;
                }
            }
            
            internal DataColumn WeaponComplexityColumn {
                get {
                    return this.columnWeaponComplexity;
                }
            }
            
            internal DataColumn AttackMode1Column {
                get {
                    return this.columnAttackMode1;
                }
            }
            
            internal DataColumn AttackMode2Column {
                get {
                    return this.columnAttackMode2;
                }
            }
            
            internal DataColumn ObjectSubtypeColumn {
                get {
                    return this.columnObjectSubtype;
                }
            }
            
            internal DataColumn MaterialTypeColumn {
                get {
                    return this.columnMaterialType;
                }
            }
            
            internal DataColumn MinStrColumn {
                get {
                    return this.columnMinStr;
                }
            }
            
            internal DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            internal DataColumn BasePriceColumn {
                get {
                    return this.columnBasePrice;
                }
            }
            
            internal DataColumn FrameInventIDColumn {
                get {
                    return this.columnFrameInventID;
                }
            }
            
            public protoRow this[int index] {
                get {
                    return ((protoRow)(this.Rows[index]));
                }
            }
            
            public event protoRowChangeEventHandler protoRowChanged;
            
            public event protoRowChangeEventHandler protoRowChanging;
            
            public event protoRowChangeEventHandler protoRowDeleted;
            
            public event protoRowChangeEventHandler protoRowDeleting;
            
            public void AddprotoRow(protoRow row) {
                this.Rows.Add(row);
            }
            
            public protoRow AddprotoRow(
                        short ObjectType, 
                        short ObjectID, 
                        System.Decimal ObjectFullID, 
                        short FrameIDType, 
                        short FrameIDOffset, 
                        short FrameID, 
                        short ItemMapValue, 
                        short WeaponComplexity, 
                        System.Byte AttackMode1, 
                        System.Byte AttackMode2, 
                        short ObjectSubtype, 
                        System.Byte MaterialType, 
                        System.Byte MinStr, 
                        int Weight, 
                        int BasePrice, 
                        int FrameInventID) {
                protoRow rowprotoRow = ((protoRow)(this.NewRow()));
                rowprotoRow.ItemArray = new object[] {
                        ObjectType,
                        ObjectID,
                        ObjectFullID,
                        FrameIDType,
                        FrameIDOffset,
                        FrameID,
                        ItemMapValue,
                        WeaponComplexity,
                        AttackMode1,
                        AttackMode2,
                        ObjectSubtype,
                        MaterialType,
                        MinStr,
                        Weight,
                        BasePrice,
                        FrameInventID};
                this.Rows.Add(rowprotoRow);
                return rowprotoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                protoDataTable cln = ((protoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new protoDataTable();
            }
            
            internal void InitVars() {
                this.columnObjectType = this.Columns["ObjectType"];
                this.columnObjectID = this.Columns["ObjectID"];
                this.columnObjectFullID = this.Columns["ObjectFullID"];
                this.columnFrameIDType = this.Columns["FrameIDType"];
                this.columnFrameIDOffset = this.Columns["FrameIDOffset"];
                this.columnFrameID = this.Columns["FrameID"];
                this.columnItemMapValue = this.Columns["ItemMapValue"];
                this.columnWeaponComplexity = this.Columns["WeaponComplexity"];
                this.columnAttackMode1 = this.Columns["AttackMode1"];
                this.columnAttackMode2 = this.Columns["AttackMode2"];
                this.columnObjectSubtype = this.Columns["ObjectSubtype"];
                this.columnMaterialType = this.Columns["MaterialType"];
                this.columnMinStr = this.Columns["MinStr"];
                this.columnWeight = this.Columns["Weight"];
                this.columnBasePrice = this.Columns["BasePrice"];
                this.columnFrameInventID = this.Columns["FrameInventID"];
            }
            
            private void InitClass() {
                this.columnObjectType = new DataColumn("ObjectType", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectType);
                this.columnObjectID = new DataColumn("ObjectID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectID);
                this.columnObjectFullID = new DataColumn("ObjectFullID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectFullID);
                this.columnFrameIDType = new DataColumn("FrameIDType", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrameIDType);
                this.columnFrameIDOffset = new DataColumn("FrameIDOffset", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrameIDOffset);
                this.columnFrameID = new DataColumn("FrameID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrameID);
                this.columnItemMapValue = new DataColumn("ItemMapValue", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemMapValue);
                this.columnWeaponComplexity = new DataColumn("WeaponComplexity", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeaponComplexity);
                this.columnAttackMode1 = new DataColumn("AttackMode1", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAttackMode1);
                this.columnAttackMode2 = new DataColumn("AttackMode2", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAttackMode2);
                this.columnObjectSubtype = new DataColumn("ObjectSubtype", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectSubtype);
                this.columnMaterialType = new DataColumn("MaterialType", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaterialType);
                this.columnMinStr = new DataColumn("MinStr", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMinStr);
                this.columnWeight = new DataColumn("Weight", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeight);
                this.columnBasePrice = new DataColumn("BasePrice", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBasePrice);
                this.columnFrameInventID = new DataColumn("FrameInventID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrameInventID);
                this.columnObjectType.AllowDBNull = false;
                this.columnObjectID.AllowDBNull = false;
            }
            
            public protoRow NewprotoRow() {
                return ((protoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new protoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(protoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.protoRowChanged != null)) {
                    this.protoRowChanged(this, new protoRowChangeEvent(((protoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.protoRowChanging != null)) {
                    this.protoRowChanging(this, new protoRowChangeEvent(((protoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.protoRowDeleted != null)) {
                    this.protoRowDeleted(this, new protoRowChangeEvent(((protoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.protoRowDeleting != null)) {
                    this.protoRowDeleting(this, new protoRowChangeEvent(((protoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveprotoRow(protoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class protoRow : DataRow {
            
            private protoDataTable tableproto;
            
            internal protoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableproto = ((protoDataTable)(this.Table));
            }
            
            public short ObjectType {
                get {
                    return ((short)(this[this.tableproto.ObjectTypeColumn]));
                }
                set {
                    this[this.tableproto.ObjectTypeColumn] = value;
                }
            }
            
            public short ObjectID {
                get {
                    return ((short)(this[this.tableproto.ObjectIDColumn]));
                }
                set {
                    this[this.tableproto.ObjectIDColumn] = value;
                }
            }
            
            public System.Decimal ObjectFullID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableproto.ObjectFullIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.ObjectFullIDColumn] = value;
                }
            }
            
            public short FrameIDType {
                get {
                    try {
                        return ((short)(this[this.tableproto.FrameIDTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.FrameIDTypeColumn] = value;
                }
            }
            
            public short FrameIDOffset {
                get {
                    try {
                        return ((short)(this[this.tableproto.FrameIDOffsetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.FrameIDOffsetColumn] = value;
                }
            }
            
            public short FrameID {
                get {
                    try {
                        return ((short)(this[this.tableproto.FrameIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.FrameIDColumn] = value;
                }
            }
            
            public short ItemMapValue {
                get {
                    try {
                        return ((short)(this[this.tableproto.ItemMapValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.ItemMapValueColumn] = value;
                }
            }
            
            public short WeaponComplexity {
                get {
                    try {
                        return ((short)(this[this.tableproto.WeaponComplexityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.WeaponComplexityColumn] = value;
                }
            }
            
            public System.Byte AttackMode1 {
                get {
                    try {
                        return ((System.Byte)(this[this.tableproto.AttackMode1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.AttackMode1Column] = value;
                }
            }
            
            public System.Byte AttackMode2 {
                get {
                    try {
                        return ((System.Byte)(this[this.tableproto.AttackMode2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.AttackMode2Column] = value;
                }
            }
            
            public short ObjectSubtype {
                get {
                    try {
                        return ((short)(this[this.tableproto.ObjectSubtypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.ObjectSubtypeColumn] = value;
                }
            }
            
            public System.Byte MaterialType {
                get {
                    try {
                        return ((System.Byte)(this[this.tableproto.MaterialTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.MaterialTypeColumn] = value;
                }
            }
            
            public System.Byte MinStr {
                get {
                    try {
                        return ((System.Byte)(this[this.tableproto.MinStrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.MinStrColumn] = value;
                }
            }
            
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableproto.WeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.WeightColumn] = value;
                }
            }
            
            public int BasePrice {
                get {
                    try {
                        return ((int)(this[this.tableproto.BasePriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.BasePriceColumn] = value;
                }
            }
            
            public int FrameInventID {
                get {
                    try {
                        return ((int)(this[this.tableproto.FrameInventIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproto.FrameInventIDColumn] = value;
                }
            }
            
            public bool IsObjectFullIDNull() {
                return this.IsNull(this.tableproto.ObjectFullIDColumn);
            }
            
            public void SetObjectFullIDNull() {
                this[this.tableproto.ObjectFullIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFrameIDTypeNull() {
                return this.IsNull(this.tableproto.FrameIDTypeColumn);
            }
            
            public void SetFrameIDTypeNull() {
                this[this.tableproto.FrameIDTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsFrameIDOffsetNull() {
                return this.IsNull(this.tableproto.FrameIDOffsetColumn);
            }
            
            public void SetFrameIDOffsetNull() {
                this[this.tableproto.FrameIDOffsetColumn] = System.Convert.DBNull;
            }
            
            public bool IsFrameIDNull() {
                return this.IsNull(this.tableproto.FrameIDColumn);
            }
            
            public void SetFrameIDNull() {
                this[this.tableproto.FrameIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemMapValueNull() {
                return this.IsNull(this.tableproto.ItemMapValueColumn);
            }
            
            public void SetItemMapValueNull() {
                this[this.tableproto.ItemMapValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeaponComplexityNull() {
                return this.IsNull(this.tableproto.WeaponComplexityColumn);
            }
            
            public void SetWeaponComplexityNull() {
                this[this.tableproto.WeaponComplexityColumn] = System.Convert.DBNull;
            }
            
            public bool IsAttackMode1Null() {
                return this.IsNull(this.tableproto.AttackMode1Column);
            }
            
            public void SetAttackMode1Null() {
                this[this.tableproto.AttackMode1Column] = System.Convert.DBNull;
            }
            
            public bool IsAttackMode2Null() {
                return this.IsNull(this.tableproto.AttackMode2Column);
            }
            
            public void SetAttackMode2Null() {
                this[this.tableproto.AttackMode2Column] = System.Convert.DBNull;
            }
            
            public bool IsObjectSubtypeNull() {
                return this.IsNull(this.tableproto.ObjectSubtypeColumn);
            }
            
            public void SetObjectSubtypeNull() {
                this[this.tableproto.ObjectSubtypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaterialTypeNull() {
                return this.IsNull(this.tableproto.MaterialTypeColumn);
            }
            
            public void SetMaterialTypeNull() {
                this[this.tableproto.MaterialTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMinStrNull() {
                return this.IsNull(this.tableproto.MinStrColumn);
            }
            
            public void SetMinStrNull() {
                this[this.tableproto.MinStrColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeightNull() {
                return this.IsNull(this.tableproto.WeightColumn);
            }
            
            public void SetWeightNull() {
                this[this.tableproto.WeightColumn] = System.Convert.DBNull;
            }
            
            public bool IsBasePriceNull() {
                return this.IsNull(this.tableproto.BasePriceColumn);
            }
            
            public void SetBasePriceNull() {
                this[this.tableproto.BasePriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsFrameInventIDNull() {
                return this.IsNull(this.tableproto.FrameInventIDColumn);
            }
            
            public void SetFrameInventIDNull() {
                this[this.tableproto.FrameInventIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class protoRowChangeEvent : EventArgs {
            
            private protoRow eventRow;
            
            private DataRowAction eventAction;
            
            public protoRowChangeEvent(protoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public protoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsubtypeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnobjectsubtype;
            
            internal itemsubtypeDataTable() : 
                    base("itemsubtype") {
                this.InitClass();
            }
            
            internal itemsubtypeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn objectsubtypeColumn {
                get {
                    return this.columnobjectsubtype;
                }
            }
            
            public itemsubtypeRow this[int index] {
                get {
                    return ((itemsubtypeRow)(this.Rows[index]));
                }
            }
            
            public event itemsubtypeRowChangeEventHandler itemsubtypeRowChanged;
            
            public event itemsubtypeRowChangeEventHandler itemsubtypeRowChanging;
            
            public event itemsubtypeRowChangeEventHandler itemsubtypeRowDeleted;
            
            public event itemsubtypeRowChangeEventHandler itemsubtypeRowDeleting;
            
            public void AdditemsubtypeRow(itemsubtypeRow row) {
                this.Rows.Add(row);
            }
            
            public itemsubtypeRow AdditemsubtypeRow(short id, string objectsubtype) {
                itemsubtypeRow rowitemsubtypeRow = ((itemsubtypeRow)(this.NewRow()));
                rowitemsubtypeRow.ItemArray = new object[] {
                        id,
                        objectsubtype};
                this.Rows.Add(rowitemsubtypeRow);
                return rowitemsubtypeRow;
            }
            
            public itemsubtypeRow FindByid(short id) {
                return ((itemsubtypeRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                itemsubtypeDataTable cln = ((itemsubtypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new itemsubtypeDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnobjectsubtype = this.Columns["objectsubtype"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columnobjectsubtype = new DataColumn("objectsubtype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnobjectsubtype);
                this.Constraints.Add(new UniqueConstraint("Dataset1Key1", new DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
            }
            
            public itemsubtypeRow NewitemsubtypeRow() {
                return ((itemsubtypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new itemsubtypeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(itemsubtypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.itemsubtypeRowChanged != null)) {
                    this.itemsubtypeRowChanged(this, new itemsubtypeRowChangeEvent(((itemsubtypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.itemsubtypeRowChanging != null)) {
                    this.itemsubtypeRowChanging(this, new itemsubtypeRowChangeEvent(((itemsubtypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.itemsubtypeRowDeleted != null)) {
                    this.itemsubtypeRowDeleted(this, new itemsubtypeRowChangeEvent(((itemsubtypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.itemsubtypeRowDeleting != null)) {
                    this.itemsubtypeRowDeleting(this, new itemsubtypeRowChangeEvent(((itemsubtypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveitemsubtypeRow(itemsubtypeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsubtypeRow : DataRow {
            
            private itemsubtypeDataTable tableitemsubtype;
            
            internal itemsubtypeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableitemsubtype = ((itemsubtypeDataTable)(this.Table));
            }
            
            public short id {
                get {
                    return ((short)(this[this.tableitemsubtype.idColumn]));
                }
                set {
                    this[this.tableitemsubtype.idColumn] = value;
                }
            }
            
            public string objectsubtype {
                get {
                    try {
                        return ((string)(this[this.tableitemsubtype.objectsubtypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitemsubtype.objectsubtypeColumn] = value;
                }
            }
            
            public bool IsobjectsubtypeNull() {
                return this.IsNull(this.tableitemsubtype.objectsubtypeColumn);
            }
            
            public void SetobjectsubtypeNull() {
                this[this.tableitemsubtype.objectsubtypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsubtypeRowChangeEvent : EventArgs {
            
            private itemsubtypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public itemsubtypeRowChangeEvent(itemsubtypeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public itemsubtypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnObjectType;
            
            private DataColumn columnObjectID;
            
            private DataColumn columnObjectFullID;
            
            private DataColumn columnObjectName;
            
            private DataColumn columnObjectDesc;
            
            internal itemsDataTable() : 
                    base("items") {
                this.InitClass();
            }
            
            internal itemsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ObjectTypeColumn {
                get {
                    return this.columnObjectType;
                }
            }
            
            internal DataColumn ObjectIDColumn {
                get {
                    return this.columnObjectID;
                }
            }
            
            internal DataColumn ObjectFullIDColumn {
                get {
                    return this.columnObjectFullID;
                }
            }
            
            internal DataColumn ObjectNameColumn {
                get {
                    return this.columnObjectName;
                }
            }
            
            internal DataColumn ObjectDescColumn {
                get {
                    return this.columnObjectDesc;
                }
            }
            
            public itemsRow this[int index] {
                get {
                    return ((itemsRow)(this.Rows[index]));
                }
            }
            
            public event itemsRowChangeEventHandler itemsRowChanged;
            
            public event itemsRowChangeEventHandler itemsRowChanging;
            
            public event itemsRowChangeEventHandler itemsRowDeleted;
            
            public event itemsRowChangeEventHandler itemsRowDeleting;
            
            public void AdditemsRow(itemsRow row) {
                this.Rows.Add(row);
            }
            
            public itemsRow AdditemsRow(short ObjectType, short ObjectID, System.Decimal ObjectFullID, string ObjectName, string ObjectDesc) {
                itemsRow rowitemsRow = ((itemsRow)(this.NewRow()));
                rowitemsRow.ItemArray = new object[] {
                        ObjectType,
                        ObjectID,
                        ObjectFullID,
                        ObjectName,
                        ObjectDesc};
                this.Rows.Add(rowitemsRow);
                return rowitemsRow;
            }
            
            public itemsRow FindByObjectTypeObjectID(short ObjectType, short ObjectID) {
                return ((itemsRow)(this.Rows.Find(new object[] {
                            ObjectType,
                            ObjectID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                itemsDataTable cln = ((itemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new itemsDataTable();
            }
            
            internal void InitVars() {
                this.columnObjectType = this.Columns["ObjectType"];
                this.columnObjectID = this.Columns["ObjectID"];
                this.columnObjectFullID = this.Columns["ObjectFullID"];
                this.columnObjectName = this.Columns["ObjectName"];
                this.columnObjectDesc = this.Columns["ObjectDesc"];
            }
            
            private void InitClass() {
                this.columnObjectType = new DataColumn("ObjectType", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectType);
                this.columnObjectID = new DataColumn("ObjectID", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectID);
                this.columnObjectFullID = new DataColumn("ObjectFullID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectFullID);
                this.columnObjectName = new DataColumn("ObjectName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectName);
                this.columnObjectDesc = new DataColumn("ObjectDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectDesc);
                this.Constraints.Add(new UniqueConstraint("Dataset1Key2", new DataColumn[] {
                                this.columnObjectType,
                                this.columnObjectID}, true));
                this.columnObjectType.AllowDBNull = false;
                this.columnObjectID.AllowDBNull = false;
            }
            
            public itemsRow NewitemsRow() {
                return ((itemsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new itemsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(itemsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.itemsRowChanged != null)) {
                    this.itemsRowChanged(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.itemsRowChanging != null)) {
                    this.itemsRowChanging(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.itemsRowDeleted != null)) {
                    this.itemsRowDeleted(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.itemsRowDeleting != null)) {
                    this.itemsRowDeleting(this, new itemsRowChangeEvent(((itemsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveitemsRow(itemsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsRow : DataRow {
            
            private itemsDataTable tableitems;
            
            internal itemsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableitems = ((itemsDataTable)(this.Table));
            }
            
            public short ObjectType {
                get {
                    return ((short)(this[this.tableitems.ObjectTypeColumn]));
                }
                set {
                    this[this.tableitems.ObjectTypeColumn] = value;
                }
            }
            
            public short ObjectID {
                get {
                    return ((short)(this[this.tableitems.ObjectIDColumn]));
                }
                set {
                    this[this.tableitems.ObjectIDColumn] = value;
                }
            }
            
            public System.Decimal ObjectFullID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableitems.ObjectFullIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ObjectFullIDColumn] = value;
                }
            }
            
            public string ObjectName {
                get {
                    try {
                        return ((string)(this[this.tableitems.ObjectNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ObjectNameColumn] = value;
                }
            }
            
            public string ObjectDesc {
                get {
                    try {
                        return ((string)(this[this.tableitems.ObjectDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitems.ObjectDescColumn] = value;
                }
            }
            
            public bool IsObjectFullIDNull() {
                return this.IsNull(this.tableitems.ObjectFullIDColumn);
            }
            
            public void SetObjectFullIDNull() {
                this[this.tableitems.ObjectFullIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsObjectNameNull() {
                return this.IsNull(this.tableitems.ObjectNameColumn);
            }
            
            public void SetObjectNameNull() {
                this[this.tableitems.ObjectNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsObjectDescNull() {
                return this.IsNull(this.tableitems.ObjectDescColumn);
            }
            
            public void SetObjectDescNull() {
                this[this.tableitems.ObjectDescColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class itemsRowChangeEvent : EventArgs {
            
            private itemsRow eventRow;
            
            private DataRowAction eventAction;
            
            public itemsRowChangeEvent(itemsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public itemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class materialtypeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnmaterialtype;
            
            internal materialtypeDataTable() : 
                    base("materialtype") {
                this.InitClass();
            }
            
            internal materialtypeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn materialtypeColumn {
                get {
                    return this.columnmaterialtype;
                }
            }
            
            public materialtypeRow this[int index] {
                get {
                    return ((materialtypeRow)(this.Rows[index]));
                }
            }
            
            public event materialtypeRowChangeEventHandler materialtypeRowChanged;
            
            public event materialtypeRowChangeEventHandler materialtypeRowChanging;
            
            public event materialtypeRowChangeEventHandler materialtypeRowDeleted;
            
            public event materialtypeRowChangeEventHandler materialtypeRowDeleting;
            
            public void AddmaterialtypeRow(materialtypeRow row) {
                this.Rows.Add(row);
            }
            
            public materialtypeRow AddmaterialtypeRow(short id, string materialtype) {
                materialtypeRow rowmaterialtypeRow = ((materialtypeRow)(this.NewRow()));
                rowmaterialtypeRow.ItemArray = new object[] {
                        id,
                        materialtype};
                this.Rows.Add(rowmaterialtypeRow);
                return rowmaterialtypeRow;
            }
            
            public materialtypeRow FindByid(short id) {
                return ((materialtypeRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                materialtypeDataTable cln = ((materialtypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new materialtypeDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnmaterialtype = this.Columns["materialtype"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(short), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columnmaterialtype = new DataColumn("materialtype", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmaterialtype);
                this.Constraints.Add(new UniqueConstraint("Dataset1Key3", new DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
            }
            
            public materialtypeRow NewmaterialtypeRow() {
                return ((materialtypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new materialtypeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(materialtypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.materialtypeRowChanged != null)) {
                    this.materialtypeRowChanged(this, new materialtypeRowChangeEvent(((materialtypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.materialtypeRowChanging != null)) {
                    this.materialtypeRowChanging(this, new materialtypeRowChangeEvent(((materialtypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.materialtypeRowDeleted != null)) {
                    this.materialtypeRowDeleted(this, new materialtypeRowChangeEvent(((materialtypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.materialtypeRowDeleting != null)) {
                    this.materialtypeRowDeleting(this, new materialtypeRowChangeEvent(((materialtypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovematerialtypeRow(materialtypeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class materialtypeRow : DataRow {
            
            private materialtypeDataTable tablematerialtype;
            
            internal materialtypeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablematerialtype = ((materialtypeDataTable)(this.Table));
            }
            
            public short id {
                get {
                    return ((short)(this[this.tablematerialtype.idColumn]));
                }
                set {
                    this[this.tablematerialtype.idColumn] = value;
                }
            }
            
            public string materialtype {
                get {
                    try {
                        return ((string)(this[this.tablematerialtype.materialtypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablematerialtype.materialtypeColumn] = value;
                }
            }
            
            public bool IsmaterialtypeNull() {
                return this.IsNull(this.tablematerialtype.materialtypeColumn);
            }
            
            public void SetmaterialtypeNull() {
                this[this.tablematerialtype.materialtypeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class materialtypeRowChangeEvent : EventArgs {
            
            private materialtypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public materialtypeRowChangeEvent(materialtypeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public materialtypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class attack_modeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnattack_mode;
            
            internal attack_modeDataTable() : 
                    base("attack_mode") {
                this.InitClass();
            }
            
            internal attack_modeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn attack_modeColumn {
                get {
                    return this.columnattack_mode;
                }
            }
            
            public attack_modeRow this[int index] {
                get {
                    return ((attack_modeRow)(this.Rows[index]));
                }
            }
            
            public event attack_modeRowChangeEventHandler attack_modeRowChanged;
            
            public event attack_modeRowChangeEventHandler attack_modeRowChanging;
            
            public event attack_modeRowChangeEventHandler attack_modeRowDeleted;
            
            public event attack_modeRowChangeEventHandler attack_modeRowDeleting;
            
            public void Addattack_modeRow(attack_modeRow row) {
                this.Rows.Add(row);
            }
            
            public attack_modeRow Addattack_modeRow(int id, string attack_mode) {
                attack_modeRow rowattack_modeRow = ((attack_modeRow)(this.NewRow()));
                rowattack_modeRow.ItemArray = new object[] {
                        id,
                        attack_mode};
                this.Rows.Add(rowattack_modeRow);
                return rowattack_modeRow;
            }
            
            public attack_modeRow FindByid(int id) {
                return ((attack_modeRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                attack_modeDataTable cln = ((attack_modeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new attack_modeDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnattack_mode = this.Columns["attack_mode"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columnattack_mode = new DataColumn("attack_mode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnattack_mode);
                this.Constraints.Add(new UniqueConstraint("Dataset1Key4", new DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
            }
            
            public attack_modeRow Newattack_modeRow() {
                return ((attack_modeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new attack_modeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(attack_modeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.attack_modeRowChanged != null)) {
                    this.attack_modeRowChanged(this, new attack_modeRowChangeEvent(((attack_modeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.attack_modeRowChanging != null)) {
                    this.attack_modeRowChanging(this, new attack_modeRowChangeEvent(((attack_modeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.attack_modeRowDeleted != null)) {
                    this.attack_modeRowDeleted(this, new attack_modeRowChangeEvent(((attack_modeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.attack_modeRowDeleting != null)) {
                    this.attack_modeRowDeleting(this, new attack_modeRowChangeEvent(((attack_modeRow)(e.Row)), e.Action));
                }
            }
            
            public void Removeattack_modeRow(attack_modeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class attack_modeRow : DataRow {
            
            private attack_modeDataTable tableattack_mode;
            
            internal attack_modeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableattack_mode = ((attack_modeDataTable)(this.Table));
            }
            
            public int id {
                get {
                    return ((int)(this[this.tableattack_mode.idColumn]));
                }
                set {
                    this[this.tableattack_mode.idColumn] = value;
                }
            }
            
            public string attack_mode {
                get {
                    try {
                        return ((string)(this[this.tableattack_mode.attack_modeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableattack_mode.attack_modeColumn] = value;
                }
            }
            
            public bool Isattack_modeNull() {
                return this.IsNull(this.tableattack_mode.attack_modeColumn);
            }
            
            public void Setattack_modeNull() {
                this[this.tableattack_mode.attack_modeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class attack_modeRowChangeEvent : EventArgs {
            
            private attack_modeRow eventRow;
            
            private DataRowAction eventAction;
            
            public attack_modeRowChangeEvent(attack_modeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public attack_modeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
